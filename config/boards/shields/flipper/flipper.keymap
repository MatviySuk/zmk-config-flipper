/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>


&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};


/ { 
    combos {
        compatible = "zmk,combos";
        combo_esc { 
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp ESC>;
        };
        combo_bksc {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp BKSP>;
        };
        combo_ent {
            timeout-ms = <50>;
	    key-positions = <23 24>;
            bindings = <&kp RET>;
        };
        combo_1 {
            timeout-ms = <50>;
	    key-positions = <26 27>;
            bindings = <&to 1>;
        };
        combo_3 {
            timeout-ms = <50>;
	    key-positions = <4 5>;
            bindings = <&to 3>;
        };
        caps {
            timeout-ms = <50>;
	    key-positions = <16 17>;
            bindings = <&kp CAPS>;
        };
        rshift {
            timeout-ms = <50>;
	    key-positions = <24 25>;
            bindings = <&sk RSHIFT>;
        };
        osl {
            timeout-ms = <50>;
	    key-positions = <3 5>;
            bindings = <&sl 5>;
        };
        
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hs: homerow_shifts {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFTS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
	td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
				&kp C 	   	&kp L 		&kp M							&kp F 		&kp U    		&kp Z 
		&kp I 		&hm LCTL S 	&hm LALT R	&hm LGUI T 	&kp G 			&kp P  		&hm RGUI N    	&hm RALT K    		&hm RCTL A 	&kp O
		&kp Q	 	&kp V 		&kp W 		&kp D 		&kp J   		&kp B 		&kp H  		&kp Y 			&kp DOT		&kp X
          									&mt LC(LS(LALT)) SPC 	&kp E
		>;
		};

       		left_layer {
		bindings = <
					&kp ATSN   	&td LC(LG(LS(N4))) LS(N3) 	&kp DLLR    							&kp LS(COMMA) 	&kp LS(DOT) 	&kp CARET 
		&kp TAB    		&hm LCTL EQUAL  &hm LALT LA(RBKT)      		&hm LGUI LA(LS(RBKT))   	&kp SQT 	&kp BSLH 	&hm RGUI LBRC  	&hm RALT RBRC 	&hm RSHIFT PIPE &trans
		&hs LSHIFT TILDE	&kp LA(N3) 	&kp LA(LBKT)			&kp LA(LS(LBKT))  		&kp DQT 	&kp LBKT 	&kp LPRN 	&kp RPRN 	&kp RBKT  	&kp LSHIFT
															&to 0 		&to 2 
		>;
		};

		right_layer {
		bindings = <
			&kp C_PP 	&kp C_PREV  	&kp C_NEXT  								&kp N7 		&kp N8 	&kp N9 
		&kp TAB	&trans   	&kp C_VOL_DN	&hm LGUI C_VOL_UP	&kp LS(EQUAL) 			&kp EQUAL 	&hm RGUI N4	&kp N5 	&kp N6   	&kp LS(MINUS)
		&to 4  	&kp AMPS	&kp SLASH 	&kp STAR 		&kp PRCNT    			&kp N0 		&kp N1 		&kp N2 	&td DOT N3  	&trans 
					  					&to 0 				&kp RGUI
		>;
		};

		tri_layer {
		bindings = <
					&mwh SCROLL_LEFT	&mmv MOVE_UP    &mwh SCROLL_RIGHT    						&kp LC(LS(TAB))   	&kp RC(TAB)	&kp LG(LBKT) 
		&kp TAB			&mmv MOVE_LEFT 		&mmv MOVE_DOWN	&mmv MOVE_RIGHT 	&kp LALT 		&kp LEFT 	&kp DOWN  		&kp UP 		&kp RIGHT 	&kp LG(RBKT)
		&td LG(GRAVE) GRAVE 	&mkp RCLK  		&mwh SCROLL_UP	&mwh SCROLL_DOWN 	&kp DEL   		&mkp LCLK 	&kp PG_DN  		&kp PG_UP  	&trans		&kp LSHIFT 	   
								 					&to 0 			&kp RGUI 
		>;
		};

		bt {
		bindings = <
				&trans 		&trans 		&trans 			&trans 	&trans	&trans 
		&bootloader  	&trans 		&trans 		&trans 	&trans 	&trans 	&trans 	&trans 	&trans	&trans 
		&bt BT_PRV	&bt BT_NXT 	&bt BT_CLR 	&trans 	&trans 	&trans 	&trans  &trans  &trans 	&trans   
				 					&to 0 	&to 1 
		>;
		};

		os {
		bindings = <
				&trans 		&trans 		&trans 					&kp SEMI	&kp COLON	&kp COMMA
		&kp EXCL  	&kp QMARK 	&kp LS(MINUS)	&kp LA(LS(RBKT))	&trans 	&trans 	&trans 		&trans 		&trans		&kp MINUS 
		&trans 		&kp SLASH 	&trans 		&trans 			&trans 	&trans 	&trans  	&trans  	&trans 		&trans   
				 							&to 0 	&to 1 
		>;
		};
        
	};
};
